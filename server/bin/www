#!/usr/bin/env node

/**
 * Module dependencies
 */
const app = require( '../app' ).application
const debug = require( 'debug' )( 'mosway:server' )
const http = require( 'http' )

/**
 * Normalize a port into a number, string, or false.
 * 
 * @param {number} val Port number.
 * @returns 
 */
const normalizePort = ( val ) => {
  let port = parseInt( val, 10 )

  if ( isNaN( port ) ) {
    return val
  }
  if ( port >= 0 ) {
    return port
  }
  return false
}

/**
 * Event listener for HTTP server "error" event.
 * 
 * @param {Error} error Error.
 */
const onError = ( error ) => {
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  if ( error.syscall !== 'listen' ) {
    throw error
  }

  // handle specific listen errors with friendly messages.
  switch ( error.code ) {
    case 'EACCES':
      console.error( bind + ' requires elevated privileges' )
      process.exit( 1 )
      break
    case 'EADDRINUSE':
      console.error( bind + ' is already in use' )
      process.exit( 1 )
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * 
 */
const onListening = () => {
  let addr = server.address()
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug( 'Listening on ' + bind )
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort( process.env.PORT || '3000' )
app.set( 'port', port )

/**
 * Create HTTP server.
*/
const server = http.createServer( app )

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen( port )
server.on( 'error', onError )
server.on( 'listening', onListening )
